name: Build

on:
  push:
    branches: [ masterx ]
  pull_request:
    branches: [ masterx ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # installer is always built with a specific version of Python
        os: [macos-10.15]
        python-version: [3.9]

    env:
      # define environment and configuration variables here.
      # app_name is how the application will be named on the disk image.
      # product_name is the name of the disk image (.dmg) that gets built.
      # qt_version, qt_platform specify which version of Qt to use.
      # these should be regularly updated to the latest usable version.
      # python_version specifies which version of Python to use.
      # this should be regularly updated to the latest usable version.
      app_name: "Nion Swift 0.16"
      product_name: NionSwift-0.16.2
      qt_version: 5.15.2
      qt_platform: clang_64
      python_version: 3.9.9

    steps:
    - uses: actions/checkout@v2

    # first set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    # next build the installer (it's a disk image with the application).
    - name: Build
      run: |
        # the first step in the build process is to create a virtual environment to be
        # used by the installation scripts and activate it. also update pip.
        mkdir venv
        python -m venv venv/installer
        source venv/installer/bin/activate
        python -m pip install --upgrade pip

        # next, install Qt using the aqt tool. only install the required Qt modules.
        # then configure the Qt5_DIR variable (used by cmake), install numpy (used by
        # cmake). then git clone the tool source code. finally run cmake.
        pip install aqtinstall
        mkdir Qt
        python -m aqt install-qt --outputdir Qt mac desktop 5.15.2 clang_64
        export Qt5_DIR=`pwd`/Qt/$qt_version/$qt_platform/lib/cmake/Qt5
        pip install numpy
        git clone https://github.com/nion-software/nionswift-tool.git
        pushd nionswift-tool/launcher
        cmake CMakeLists.txt
        cmake --build . --config Release
        popd

        # copy the application built in the last step to the distribution directory.
        rm -rf dist; mkdir -p dist/
        cp -R "nionswift-tool/launcher/build/Nion Swift.app" "dist/$app_name.app"

        # now install a fresh Python from python.org. use a version from the earliest supported target OS.
        # on macOS, manually extract Python from the pkg. then run mac_fix_framework to fix dylib references.
        # the default Python assumes it is installed in /Library/Frameworks. However, the tool application
        # needs to be relocatable. So mac_fix_frameworks adjusts all of the dylibs to be located relative
        # to the tool executable (rpath).
        # finally copy the extracted Python to the distribution directory, create a new environment (python-nionswift),
        # and activate the environment.
        curl -O https://www.python.org/ftp/python/$python_version/python-$python_version-macosx10.9.pkg
        # print md5 to be used for verification if desired.
        md5 python-$python_version-macosx10.9.pkg
        mkdir python-$python_version-macosx10.9
        xar -xf python-$python_version-macosx10.9.pkg -C python-$python_version-macosx10.9
        rm -rf Python.framework; mkdir Python.framework
        tar -zxf python-$python_version-macosx10.9/Python_Framework.pkg/Payload -C Python.framework
        echo "Running fix"
        python mac_fix_framework.py Python.framework/
        rm -rf "dist/$app_name.app/Contents/Frameworks/Python.framework"
        cp -R Python.framework "dist/$app_name.app/Contents/Frameworks/"
        python3.9 -m venv python-nionswift
        source python-nionswift/bin/activate

        # install latest version of nionswift (UNUSED EXCEPT FOR DEBUGGING)

        # git clone https://github.com/nion-software/nionutils.git
        # git clone https://github.com/nion-software/niondata.git
        # git clone https://github.com/nion-software/nionui.git
        # git clone https://github.com/nion-software/nionswift.git
        # git clone https://github.com/nion-software/nionswift-io.git
        # git clone https://github.com/nion-software/nionswift-instrumentation-kit.git
        # git clone https://github.com/nion-software/eels-analysis.git nionswift-eels-analysis
        # git clone https://github.com/nion-software/nionswift-usim.git

        # python -m pip install ./nionutils
        # python -m pip install ./niondata
        # python -m pip install ./nionui
        # python -m pip install ./nionswift
        # python -m pip install ./nionswift-instrumentation-kit
        # python -m pip install ./nionswift-eels-analysis
        # python -m pip install ./nionswift-usim

        # install the latest released version in the activated Python environment.
        python -m pip install nionswift nionswift-eels-analysis nionswift-usim

        # deactivate the environment since everything is installed.
        deactivate

        # configure the environment by copying site-packages, the toolconfig.toml file, application icon,
        # and splash screen.
        mkdir -p "dist/$app_name.app/Contents/MacOS/python-nionswift/lib/python3.9"
        cp -R python-nionswift/lib/python3.9/site-packages "dist/$app_name.app/Contents/MacOS/python-nionswift/lib/python3.9"
        cp mac_toolconfig.toml "dist/$app_name.app/Contents/MacOS/toolconfig.toml"
        cp "nionswift-tool/launcher/Graphics/MacIcon.icns" "dist/$app_name.app/Contents/Resources/"
        cp "nionswift-tool/launcher/Artwork/splash_600x400.png" "dist/$app_name.app/Contents/Resources/splash.png"

        # finally, create the disk image
        hdiutil create tmp.dmg -ov -volname "$app_name Install" -fs HFS+ -srcfolder "dist/"
        hdiutil convert tmp.dmg -format UDZO -o "$product_name.dmg"

    # finally, upload the artifacts of the build so they are available on the GitHub action page.
    - name: Upload Product DMG
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.product_name }}.dmg
        path: ${{ env.product_name }}.dmg
